diff --git a/src/renderer-process/controller.js b/src/renderer-process/controller.js
old mode 100644
new mode 100755
index 84df1d4..87dc0aa
--- a/src/renderer-process/controller.js
+++ b/src/renderer-process/controller.js
@@ -361,6 +361,20 @@ exports.deleteAssetListLocal = function(tab) {
     editor.deleteAssetList(tab)
 }
 
+exports.addAssetBundle = function(asset) {
+	exports.addAssetBundleLocal(asset)
+	network.emit('add asset bundle', asset)
+}
+
+exports.addAssetBundleLocal = function(asset) {
+	project.addAssetBundle(asset)
+	stage.addAssetBundle(asset)
+	editor.setAssetBundle(asset.tab, asset.hash)
+	editor.saveAssetBundle()
+	editor.addAsset(asset.tab, asset.hash)
+	exports.emitPopout('add asset bundle', asset)
+}
+
 exports.deleteCharacter = function(character) {
 	var index = project.project.hotbar.indexOf(character.id)
 	if (index > -1) {
@@ -387,6 +401,11 @@ exports.saveCharacter = function(character, thumbnail) {
 	}    
 }
 
+exports.saveAssetBundle = function(asset, thumbnail) {
+    project.saveAssetBundle(asset)
+    editor.updateAssetBundle(thumbnail)
+}
+
 exports.connect = function() {
     stage.clearPuppets()
 	if (popout) popout.webContents.send('connect')
diff --git a/src/renderer-process/editor.js b/src/renderer-process/editor.js
old mode 100644
new mode 100755
index a1bfb26..cbb0390
--- a/src/renderer-process/editor.js
+++ b/src/renderer-process/editor.js
@@ -25,6 +25,7 @@ var scale = 1 // scale of the editor view
 var puppet // puppet being edited
 var character // character being edited
 var oldcharacter // currently saved version of character
+var bundle // asset bundle being edited
 var layer // layer being edited
 var clickableAssets = [] // assets in editor that are clickable
 var selected // selected asset inside of pixi
@@ -58,14 +59,136 @@ exports.init = function() {
         sprite.rotation = asset.rotation
         sprite.scale.x = asset.scaleX
         sprite.scale.y = asset.scaleY
-        sprite.layer = layer
-        sprite.asset = asset
-        clickableAssets.push(sprite)
+        if (layer) {
+            sprite.layer = layer
+            sprite.asset = asset
+            clickableAssets.push(sprite)
+        }
         return sprite
     }
+    stage.applyTransformations = function(asset, bundle) {
+        var newAsset = JSON.parse(JSON.stringify(asset))
+        newAsset.x = bundle.x + Math.cos(bundle.rotation) * asset.x * bundle.scaleX - Math.sin(bundle.rotation) * asset.y * bundle.scaleY
+        newAsset.y = bundle.y + Math.cos(bundle.rotation) * asset.y * bundle.scaleY - Math.sin(bundle.rotation) * asset.x * bundle.scaleX
+        return newAsset
+    }
+    stage.applyAssetBundle = function(puppet, asset) {
+        // So here we're doing some tricky stuff to make asset bundles work
+        // The issue is that a sprite can't be in two different containers at the same time
+        // but we have two things we want to use containers for:
+        // 1. We want the asset bundle to be in a container so it can be moved, rotated, etc. collectively
+        // 2. We want the assets to be in the various layer containers they belong to, so that they render in the right order
+        // So what we do is make two sprites for each asset. One gets added to a container for the asset bundle that can be manipulated right
+        // and the other to the respective layer container. I keep links between the two so that whenever I update the invisible container, I
+        // can set the position, etc. of the visible assets
+        var bundle = this.assets[asset.tab][asset.hash].bundle
+
+        var container = new Container()
+        container.layer = 'bundles'
+        container.asset = asset
+        container.bundle = bundle
+        container.assets = []
+        puppet.container.addChild(container)
+        container.alpha = 0
+        container.rotation = asset.rotation
+        container.scale.x = asset.scaleX
+        container.scale.y = asset.scaleY
+
+        var minX = null
+        var minY = null
+        var maxX = null
+        var maxY = null
+
+        for (var i = 0; i < bundle.body.length; i++) {
+            var sprite = this.getAsset(bundle.body[i])
+            puppet.body.addChild(sprite)
+            container.addChild(this.getAsset(this.applyTransformations(bundle.body[i], asset)))
+            container.assets.push(sprite)
+            minX = minX === null ? bundle.body[i].x - sprite.width / 2 : Math.min(minX, bundle.body[i].x - sprite.width / 2)
+            maxX = maxX === null ? bundle.body[i].x + sprite.width / 2 : Math.max(maxX, bundle.body[i].x + sprite.width / 2)
+            minY = minY === null ? bundle.body[i].y - sprite.height / 2 : Math.min(minY, bundle.body[i].y - sprite.height / 2)
+            maxY = maxY === null ? bundle.body[i].y + sprite.height / 2 : Math.max(maxY, bundle.body[i].y + sprite.height / 2)
+        }
+        for (var i = 0; i < bundle.head.length; i++) {
+            var sprite = this.getAsset(this.applyTransformations(bundle.head[i], asset))
+            puppet.headBase.addChild(sprite)
+            container.addChild(this.getAsset(this.applyTransformations(bundle.head[i], asset)))
+            container.assets.push(sprite)
+            minX = minX === null ? minX : Math.min(minX, bundle.head[i].x)
+            maxX = maxX === null ? maxX : Math.max(maxX, bundle.head[i].x + bundle.head[i].width)
+            minY = minY === null ? minY : Math.min(minY, bundle.head[i].y)
+            maxY = maxY === null ? maxY : Math.max(maxY, bundle.head[i].y + bundle.head[i].height)
+        }
+        var emotes = Object.keys(bundle.emotes)
+        for (var i = 0; i < emotes.length; i++) {
+            puppet.emotes[emotes[i]] = {
+                "mouth": new Container(),
+                "eyes": new Container()
+            }
+            puppet.mouthsContainer.addChild(puppet.emotes[emotes[i]].mouth)
+            puppet.eyesContainer.addChild(puppet.emotes[emotes[i]].eyes)
+            for (var j = 0; j < bundle.emotes[emotes[i]].mouth.length; j++) {
+                var sprite = this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].mouth[j], asset))
+                puppet.emotes[emotes[i]].mouth.addChild(sprite)
+                container.addChild(this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].mouth[j], asset)))
+                container.assets.push(sprite)
+                minX = minX === null ? minX : Math.min(minX, bundle.emotes[emotes[i]].mouth[j].x)
+                maxX = maxX === null ? maxX : Math.max(maxX, bundle.emotes[emotes[i]].mouth[j].x + bundle.emotes[emotes[i]].mouth[j].width)
+                minY = minY === null ? minY : Math.min(minY, bundle.emotes[emotes[i]].mouth[j].y)
+                maxY = maxY === null ? maxY : Math.max(maxY, bundle.emotes[emotes[i]].mouth[j].y + bundle.emotes[emotes[i]].mouth[j].height)
+            }
+            for (var j = 0; j < bundle.emotes[emotes[i]].eyes.length; j++) {
+                var sprite = this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].eyes[j], asset))
+                puppet.emotes[emotes[i]].eyes.addChild(sprite)
+                container.addChild(this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].eyes[j], asset)))
+                container.assets.push(sprite)
+                minX = minX === null ? minX : Math.min(minX, bundle.emotes[emotes[i]].eyes[j].x)
+                maxX = maxX === null ? maxX : Math.max(maxX, bundle.emotes[emotes[i]].eyes[j].x + bundle.emotes[emotes[i]].eyes[j].width)
+                minY = minY === null ? minY : Math.min(minY, bundle.emotes[emotes[i]].eyes[j].y)
+                maxY = maxY === null ? maxY : Math.max(maxY, bundle.emotes[emotes[i]].eyes[j].y + bundle.emotes[emotes[i]].eyes[j].height)
+            }
+        }
+        for (var i = 0; i < bundle.hat.length; i++) {
+            var sprite = this.getAsset(this.applyTransformations(bundle.hat[i], asset))
+            puppet.hat.addChild(sprite)
+            container.addChild(this.getAsset(this.applyTransformations(bundle.hat[i], asset)))
+            container.assets.push(sprite)
+            minX = minX === null ? minX : Math.min(minX, bundle.hat[i].x)
+            maxX = maxX === null ? maxX : Math.max(maxX, bundle.hat[i].x + bundle.hat[i].width)
+            minY = minY === null ? minY : Math.min(minY, bundle.hat[i].y)
+            maxY = maxY === null ? maxY : Math.max(maxY, bundle.hat[i].y + bundle.hat[i].height)
+        }
+        for (var i = 0; i < bundle.props.length; i++) {
+            var sprite = this.getAsset(this.applyTransformations(bundle.props[i], asset))
+            puppet.props.addChild(sprite)
+            container.addChild(this.getAsset(this.applyTransformations(bundle.props[i], asset)))
+            container.assets.push(sprite)
+            minX = minX === null ? minX : Math.min(minX, bundle.props[i].x)
+            maxX = maxX === null ? maxX : Math.max(maxX, bundle.props[i].x + bundle.props[i].width)
+            minY = minY === null ? minY : Math.min(minY, bundle.props[i].y)
+            maxY = maxY === null ? maxY : Math.max(maxY, bundle.props[i].y + bundle.props[i].height)
+        }
+
+        if (minX !== null && maxX !== null && minY !== null && maxY !== null)
+            container.center = {x: (minX + maxX) / 2, y: - maxY / 2}
+
+        for (var i = 0; i < container.children.length; i++) {
+            container.children[i].position.x -= (minX + maxX) / 2
+            container.children[i].position.y += (- maxY)
+        }
+
+        container.initial = {}
+        container.x = container.initial.x = asset.x
+        container.y = container.initial.y = asset.y
+
+        console.log(container.width, container.height)
+
+        clickableAssets.push(container)
+        updateAssetBundle(container)
+    }
 
     // Make mousedown work on entire stage
-    var backdrop = new PIXI.Container();
+    var backdrop = new Container();
     backdrop.interactive = true;
     backdrop.containsPoint = () => true;
     stage.stage.addChild(backdrop)
@@ -122,7 +245,24 @@ exports.init = function() {
     document.getElementById('delete-character').addEventListener('click', deleteCharacter)
     document.getElementById('add-asset').addEventListener('click', addAsset)
     document.getElementById('new-asset-bundle').addEventListener('click', () => {
-        status.log('Not Yet Implemented!')
+        controller.addAssetBundle(project.createAssetBundle(document.getElementById('asset tabs').value))
+        // current issues (start from bottom):
+        // review code heavily, since I've gone about this in multiple ways- for example, asset bundles don't need width/height members anymore
+        // test stuff with normal assets to make sure they're OK
+        // stuff is messed up at scale =/= 1
+        // closing project: "can't set property name of undefined" editor:160 when saving (also stage:340)
+        // server.js not working?
+        // saving asset bundle doesn't update characters using it (handle in controller.saveAssetBundleLocal)
+        // when rotating, asset bundle x and y are slightly offset when at bottom left or top right edges
+        // deleting asset bundles from puppets
+
+        // Things left to be done:
+        // asset bundles settings window (renaming, deleting, remove bobble head option, change asset list)
+        // importing asset bundle JSONs
+        // move asset bundle json to separate file (so turn "bundle" from a json object to a filename)
+        // puppet>settings "Export as asset bundle" button
+        // nested (but NOT recusrive) asset bundles
+        // move this into a function
     })
     document.getElementById('edit-asset-list').addEventListener('click', editAssetList)
     document.getElementById('close-edit-asset-list').addEventListener('click', closeAssetListEditor)
@@ -170,7 +310,7 @@ exports.addAsset = function(tab, asset) {
     document.getElementById('tab ' + tab).appendChild(assetElement)
     assetElement.id = project.assets[tab][asset].name.toLowerCase()
     assetElement.className = "asset " + asset
-    assetElement.innerHTML = '<div class="desc">' + project.assets[tab][asset].name + '</div>'
+    assetElement.innerHTML = '<div class="desc">' + project.assets[tab][asset].name + '</div>' + (project.assets[tab][asset].bundle ? '<div class="bundle"/>' : '')
     var assetDraggable = document.createElement('img')
     assetElement.appendChild(assetDraggable)
     assetDraggable.tab = tab
@@ -276,7 +416,7 @@ exports.checkChanges = function() {
             "buttons": ["Don't Save", "Cancel", "Save"],
             "defaultId": 2,
             "title": "Save Project?",
-            "message": "Do you want to save the changes to " + character.name + "?",
+            "message": "Do you want to save the changes to " + (bundle ? bundle.name : character.name) + "?",
             "detail": "If you don't save, your changes will be lost.",
             "cancelId": 1
         })
@@ -342,17 +482,99 @@ exports.setPuppet = function(newCharacter, override) {
 
     document.getElementById('editor-name').value = character.name
     document.getElementById('deadbonesstyle').checked = character.deadbonesStyle
+
+    // Undo asset bundle stuff
+    bundle = null
+    document.getElementById('bundles').style.display = 'inline-block'
+    document.getElementById('editor-babble').style.visibility = 'visible'
+    var bundleNode = document.getElementById('editor-screen').getElementsByClassName('bundle')
+    if (bundleNode[0])
+        bundleNode[0].remove()
+}
+
+exports.setAssetBundle = function(tab, asset) {
+    selected = null
+    if (selectedGui) stage.stage.removeChild(selectedGui)
+    clickableAssets = []
+
+    if (!exports.checkChanges())
+        return
+
+    bundle = project.assets[tab][asset]
+    bundle.tab = tab
+    bundle.hash = asset
+    character = bundle.bundle
+    oldcharacter = JSON.stringify(character)
+    puppet = stage.createPuppet(character)
+    stage.setPuppet(1, puppet)
+
+    if (layer === 'bundles') {
+        layer = 'body'
+        var selected = document.getElementById('editor-layers-panel').getElementsByClassName("selected")
+        while (selected.length)
+            selected[0].classList.remove("selected")
+        document.getElementById(layer).className += " selected"
+    }
+
+    // Update Editor Panels
+    var panel = document.getElementById('editor-layers-panel')
+    var selected = panel.getElementsByClassName("selected")
+    while (selected.length)
+        selected[0].classList.remove("selected")
+    var available = panel.getElementsByClassName("available")
+    while (available.length)
+        available[0].classList.remove("available")
+    document.getElementById(layer).className += " selected"
+    var emotes = panel.getElementsByClassName("emote")
+    for (var i = 0; i < emotes.length; i++) {
+        emotes[i].className += " available"
+    }
+
+    document.getElementById('editor-name').value = character.name
+    document.getElementById('deadbonesstyle').style.display = 'none'
+
+    // Set stuff up for asset bundles
+    document.getElementById('bundles').style.display = 'none'
+    document.getElementById('editor-babble').style.visibility = 'hidden'
+    var bundleNode = document.createElement('div')
+    bundleNode.innerHTML = '<div class="bundle"/>'
+    document.getElementById('editor-screen').appendChild(bundleNode)
+}
+
+exports.saveAssetBundle = function() {
+    status.log('Saving asset bundle...')
+    selected = null
+    if (selectedGui) stage.stage.removeChild(selectedGui)
+    let tempScale = scale
+    scale = 1
+    stage.resize()
+    stage.renderer.render(stage.stage)
+    bundle.width = stage.screen.clientWidth * scale
+    bundle.height = stage.screen.clientHeight * scale
+    controller.saveAssetBundle(bundle, stage.renderer.view.toDataURL().replace(/^data:image\/\w+;base64,/, ""))
+    scale = tempScale
+    stage.resize()
+    oldcharacter = JSON.stringify(character)
+    status.log('Asset bundle saved!')
+}
+
+exports.updateAssetBundle = function(thumbnail) {
+    let localBundle = bundle
+    fs.writeFile(path.join(project.assetsPath, bundle.location), new Buffer(thumbnail, 'base64'), (err) => {
+        if (err) console.log(err)
+        document.getElementById('tab ' + localBundle.tab).getElementsByClassName(localBundle.hash)[0].getElementsByClassName('contain')[0].src = path.join(project.assetsPath, localBundle.location) + '?random=' + new Date().getTime()
+    })
 }
 
 function drawBox(box) {
     box.lineStyle(4, 0x242a33)
-    box.moveTo(stage.screen.clientWidth / 2 - selected.width / 2 * scale - 12, stage.screen.clientHeight + selected.height / 2 * scale + 12)
-    box.lineTo(stage.screen.clientWidth / 2 - selected.width / 2 * scale - 12, stage.screen.clientHeight - selected.height / 2 * scale - 12)
-    box.lineTo(stage.screen.clientWidth / 2 + selected.width / 2 * scale + 12, stage.screen.clientHeight - selected.height / 2 * scale - 12)
-    box.lineTo(stage.screen.clientWidth / 2 + selected.width / 2 * scale + 12, stage.screen.clientHeight + selected.height / 2 * scale + 12)
-    box.lineTo(stage.screen.clientWidth / 2 - selected.width / 2 * scale - 12, stage.screen.clientHeight + selected.height / 2 * scale + 12)
+    box.moveTo(stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 12, stage.screen.clientHeight + Math.abs(selected.height) / 2 * scale + 12)
+    box.lineTo(stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 12, stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 12)
+    box.lineTo(stage.screen.clientWidth / 2 + Math.abs(selected.width) / 2 * scale + 12, stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 12)
+    box.lineTo(stage.screen.clientWidth / 2 + Math.abs(selected.width) / 2 * scale + 12, stage.screen.clientHeight + Math.abs(selected.height) / 2 * scale + 12)
+    box.lineTo(stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 12, stage.screen.clientHeight + Math.abs(selected.height) / 2 * scale + 12)
     box.lineStyle(2, 0x242a33, 0.5)
-    box.drawCircle(stage.screen.clientWidth / 2 + selected.width / 2 * scale + 12, stage.screen.clientHeight - selected.height / 2 * scale - 12, 24)
+    box.drawCircle(stage.screen.clientWidth / 2 + Math.abs(selected.width) / 2 * scale + 12, stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 12, 24)
 }
 
 function setSelected(asset) {
@@ -370,8 +592,8 @@ function setSelected(asset) {
         graphics.beginFill(0x242a33)
         graphics.drawCircle(0, 0, 6)
         corners[i] = new Sprite(graphics.generateCanvasTexture(1))
-        corners[i].x = stage.screen.clientWidth / 2 - selected.width / 2 * scale - 20 + (24 + selected.width * scale) * (i % 2)
-        corners[i].y = stage.screen.clientHeight - selected.height / 2 * scale - 20 + (24 + selected.height * scale) * Math.floor(i / 2)
+        corners[i].x = stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 20 + (24 + Math.abs(selected.width) * scale) * (i % 2)
+        corners[i].y = stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 20 + (24 + Math.abs(selected.height) * scale) * Math.floor(i / 2)
         selectedGui.addChild(corners[i])
         corners[i].i = i
         corners[i].interactive = true
@@ -383,7 +605,7 @@ function setSelected(asset) {
     rotate.width = rotate.height = 24
     rotate.interactive = true
     rotate.on('mousedown', rotateMousedown)
-    rotate.x = corners[1].x + 12
+    rotate.x = corners[1].x + 16
     rotate.y = corners[1].y - 24
     selectedGui.addChild(rotate)
     selectedGui.rotate = rotate
@@ -405,10 +627,17 @@ function setSelected(asset) {
     flipHoriz.y = corners[1].y - 32
     selectedGui.addChild(flipHoriz)
     selectedGui.flipHoriz = flipHoriz
-    selectedGui.pivot.x = stage.screen.clientWidth / 2 - selected.width / 2 * scale - 12 + (24 + selected.width * scale) * 0.5
-    selectedGui.pivot.y = stage.screen.clientHeight - selected.height / 2 * scale - 12 + (24 + selected.height * scale) * 0.5
-    selectedGui.x = selected.x * scale + selectedGui.pivot.x
-    selectedGui.y = selected.y * scale + selectedGui.pivot.y
+    status.debug(selected)
+    selectedGui.pivot.x = stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 12 + (24 + Math.abs(selected.width) * scale) * 0.5
+    selectedGui.pivot.y = stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 12 + (24 + Math.abs(selected.height) * scale) * 0.5
+    if (selected.center) {
+        selectedGui.x = (selected.x + selected.initial.x) * scale + selectedGui.pivot.x
+        selectedGui.y = (selected.y + selected.initial.y - selected.height / 2) * scale + selectedGui.pivot.y
+    } else {
+        selectedGui.x = selected.x * scale + selectedGui.pivot.x
+        selectedGui.y = selected.y * scale + selectedGui.pivot.y
+    }
+
     selectedGui.rotation = selected.rotation
     stage.stage.addChild(selectedGui)
 }
@@ -423,7 +652,7 @@ function editorMousedown(e) {
         var dx = centerX - e.data.global.x;
         var dy = centerY - e.data.global.y;
         var dist = dx*dx + dy*dy; //Distance is not squared as it's not needed.
-        if((dist < distance || distance == -1) && clickableAssets[i].visible && clickableAssets[i].containsPoint(e.data.global) && clickableAssets[i].layer === layer) {
+        if((dist < distance || distance == -1) && clickableAssets[i].visible && bounds.contains(e.data.global.x, e.data.global.y) && clickableAssets[i].layer === layer) {
             if (layer.indexOf('-emote') > -1) {
                 if(document.getElementById('eyemouth').checked && character.emotes[layer.replace(/-emote/, '')].mouth.indexOf(clickableAssets[i].asset) > -1)
                     continue
@@ -437,7 +666,7 @@ function editorMousedown(e) {
     if (closest) {
         setSelected(closest)
         closest.dragging = true
-        closest.start = {"x": e.data.getLocalPosition(closest.parent).x - selected.position.x, "y": e.data.getLocalPosition(closest.parent).y - selected.position.y}
+        closest.start = {"x": e.data.getLocalPosition(closest.parent).x - selected.x, "y": e.data.getLocalPosition(closest.parent).y - selected.y}
         selectedGui.startX = e.data.global.x
         selectedGui.startY = e.data.global.y
     } else if (selected) {
@@ -454,15 +683,20 @@ function editorMousemove(e) {
             var dist = Math.hypot(Math.cos(rotation) * (e.data.global.x - selectedGui.startX), Math.sin(rotation) * (e.data.global.y - selectedGui.startY)) / scale
             selected.x = selected.asset.x + Math.cos(rotation) * dist
             selected.y = selected.asset.y + Math.sin(rotation) * dist
-            selectedGui.x = selected.x * scale + selectedGui.pivot.x
-            selectedGui.y = selected.y * scale + selectedGui.pivot.y
         } else {
             var position = e.data.getLocalPosition(selected.parent)
             selected.x = position.x - selected.start.x
             selected.y = position.y - selected.start.y
+        }
+        if (selected.center) {
+            selectedGui.x = (selected.x + selected.initial.x) * scale + selectedGui.pivot.x
+            selectedGui.y = (selected.y + selected.initial.y - selected.height / 2) * scale + selectedGui.pivot.y
+        } else {
             selectedGui.x = selected.x * scale + selectedGui.pivot.x
             selectedGui.y = selected.y * scale + selectedGui.pivot.y
         }
+        console.log(selected.x, selected.y);
+        updateAssetBundle()
     }
 }
 
@@ -511,35 +745,51 @@ function resizeMousemove(e) {
     }
 
     if (e.data.originalEvent.shiftKey) {
-        selected.width = Math.max(0, selectedGui.origWidth + 2 * dx)
-        selected.height = Math.max(0, selectedGui.origHeight + 2 * dy)
+        selected.width = Math.max(0, selectedGui.origWidth + 2 * dx) * (selectedGui.origWidth > 0 ? 1 : -1)
+        selected.height = Math.max(0, selectedGui.origHeight + 2 * dy) * (selectedGui.origHeight > 0 ? 1 : -1)
 
-        selected.x = selected.asset.x
-        selected.y = selected.asset.y
+        if (selected.center) {
+            selected.x = selected.asset.x - selected.center.x * (selected.scale.x - 1)
+            selected.y = selected.asset.y - selected.center.y * (selected.scale.y - 1)
+        } else {
+            selected.x = selected.asset.x
+            selected.y = selected.asset.y
+        }
     } else {
-        selected.width = Math.max(0, selectedGui.origWidth + dx)
-        selected.height = Math.max(0, selectedGui.origHeight + dy)
+        selected.width = Math.max(0, Math.abs(selectedGui.origWidth) + dx) * (selectedGui.origWidth > 0 ? 1 : -1)
+        selected.height = Math.max(0, Math.abs(selectedGui.origHeight) + dy) * (selectedGui.origHeight > 0 ? 1 : -1)
 
-        selected.x = selectedGui.corner.x + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.cos(selected.rotation) * selected.width / 2 - (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.sin(selected.rotation) * selected.height / 2
-        selected.y = selectedGui.corner.y + (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.cos(selected.rotation) * selected.height / 2 + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.sin(selected.rotation) * selected.width / 2
+        if (selected.center) {
+            selected.x = selectedGui.corner.x + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.cos(selected.rotation) * Math.abs(selected.width) / 2 - (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.sin(selected.rotation) * Math.abs(selected.height) / 2 - selected.center.x * selected.scale.x
+            selected.y = selectedGui.corner.y + (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.cos(selected.rotation) * Math.abs(selected.height) / 2 + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.sin(selected.rotation) * Math.abs(selected.width) / 2 - selected.center.y * selected.scale.y
+        } else {
+            selected.x = selectedGui.corner.x + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.cos(selected.rotation) * selected.width / 2 - (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.sin(selected.rotation) * selected.height / 2
+            selected.y = selectedGui.corner.y + (Math.floor(selectedGui.i / 2) == 1 ? 1 : -1) * Math.cos(selected.rotation) * selected.height / 2 + (selectedGui.i % 2 == 1 ? 1 : -1) * Math.sin(selected.rotation) * selected.width / 2
+        }
     }
 
     selectedGui.box.clear()
     drawBox(selectedGui.box)
     for (var i = 0; i < selectedGui.corners.length; i++) {
-        selectedGui.corners[i].x = stage.screen.clientWidth / 2 / scale - selected.width / 2 - 20 + (24 + selected.width) * (i % 2)
-        selectedGui.corners[i].y = stage.screen.clientHeight / scale - selected.height / 2 - 20 + (24 + selected.height) * Math.floor(i / 2)
+        selectedGui.corners[i].x = stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 20 + (24 + Math.abs(selected.width) * scale) * (i % 2)
+        selectedGui.corners[i].y = stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 20 + (24 + Math.abs(selected.height) * scale) * Math.floor(i / 2)
     }
-    selectedGui.rotate.x = selectedGui.corners[1].x + 12
+    selectedGui.rotate.x = selectedGui.corners[1].x + 16
     selectedGui.rotate.y = selectedGui.corners[1].y - 24
-    selectedGui.flipHoriz.x = selectedGui.corners[1].x - 12
-    selectedGui.flipHoriz.y = selectedGui.corners[1].y - 32
     selectedGui.flipVert.x = selectedGui.corners[1].x + 24
     selectedGui.flipVert.y = selectedGui.corners[1].y
-    selectedGui.pivot.x = stage.screen.clientWidth / 2 - selected.width / 2 * scale - 12 + (24 + selected.width * scale) * 0.5
-    selectedGui.pivot.y = stage.screen.clientHeight - selected.height / 2 * scale - 12 + (24 + selected.height * scale) * 0.5
-    selectedGui.x = selected.x * scale + selectedGui.pivot.x
-    selectedGui.y = selected.y * scale + selectedGui.pivot.y
+    selectedGui.flipHoriz.x = selectedGui.corners[1].x - 12
+    selectedGui.flipHoriz.y = selectedGui.corners[1].y - 32
+    selectedGui.pivot.x = stage.screen.clientWidth / 2 - Math.abs(selected.width) / 2 * scale - 12 + (24 + Math.abs(selected.width) * scale) * 0.5
+    selectedGui.pivot.y = stage.screen.clientHeight - Math.abs(selected.height) / 2 * scale - 12 + (24 + Math.abs(selected.height) * scale) * 0.5
+    if (selected.center) {
+        selectedGui.x = (selected.x + selected.center.x * selected.scale.x) * scale + selectedGui.pivot.x
+        selectedGui.y = (selected.y + selected.center.y * selected.scale.y) * scale + selectedGui.pivot.y
+    } else {
+        selectedGui.x = selected.x * scale + selectedGui.pivot.x
+        selectedGui.y = selected.y * scale + selectedGui.pivot.y
+    }
+    updateAssetBundle()
 }
 
 function resizeMouseup() {
@@ -557,15 +807,25 @@ function rotateMousedown(e) {
     selectedGui.dragging = true
     stage.stage.on('mousemove', rotateMousemove)
     stage.stage.on('mouseup', rotateMouseup)
-    selectedGui.startRotation = Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x) + selected.asset.rotation
+    if (selected.center)
+        selectedGui.startRotation = Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y - selected.center.y * selected.scale.y * scale - Math.abs(selected.height) / 2, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x - selected.center.x * selected.scale.x * scale) + selected.asset.rotation
+    else
+        selectedGui.startRotation = Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x) + selected.asset.rotation
 }
 
 function rotateMousemove(e) {
-    var rotation = selectedGui.startRotation - Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x)
+    var rotation
+    if (selected.center)
+        rotation = selectedGui.startRotation - Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y - selected.center.y * selected.scale.y * scale - Math.abs(selected.height) / 2, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x - selected.center.x * selected.scale.x * scale)
+    else
+        rotation = selectedGui.startRotation - Math.atan2((stage.screen.clientHeight - e.data.global.y) / scale + selected.asset.y, (e.data.global.x - stage.screen.clientWidth / 2) / scale - selected.asset.x)
+
     if (e.data.originalEvent.ctrlKey)
         rotation = Math.round(rotation / ROUND_ROTATION) * ROUND_ROTATION
+
     selected.rotation = rotation
     selectedGui.rotation = rotation
+    updateAssetBundle()
 }
 
 function rotateMouseup() {
@@ -579,12 +839,26 @@ function flipVertically(e) {
     e.stopPropagation()
     selected.height *= -1
     selected.asset.scaleY *= -1
+    if (selected.center) {
+        selected.center.y *= -1
+        for (var i = 0; i < selected.children.length; i++) {
+            selected.children[i].position.y += 2 * selected.center.y
+        }
+        updateAssetBundle()
+    }
 }
 
 function flipHorizontally(e) {
     e.stopPropagation()
     selected.width *= -1
     selected.asset.scaleX *= -1
+    if (selected.center) {
+        selected.center.x *= -1
+        for (var i = 0; i < selected.children.length; i++) {
+            selected.children[i].position.x += 2 * selected.center.x
+        }
+        updateAssetBundle()
+    }
 }
 
 function mouseUp(e) {
@@ -597,13 +871,30 @@ function mouseUp(e) {
                 var newAsset = {
                     "tab": asset.tab,
                     "hash": asset.asset,
+                    //"x": (e.clientX - rect.left - rect.width / 2) / scale,
+                    //"y": (e.clientY - rect.bottom) / scale,
                     "x": (e.clientX - rect.left - rect.width / 2) / scale,
                     "y": (e.clientY - rect.bottom) / scale,
                     "rotation": 0,
                     "scaleX": 1,
                     "scaleY": 1
                 }
-                if (layer.indexOf('-emote') > -1) {
+                console.log(newAsset.x, newAsset.y, asset.height)
+                if (project.assets[asset.tab][asset.asset].bundle) {
+                    if (bundle) {
+                        status.log("Error: You cannot nest asset bundles.")
+                    } else {
+                        newAsset.x = newAsset.x / 2 + 35;
+                        newAsset.y = newAsset.y / 2 + 150;
+                        character.bundles.push(newAsset)
+                        exports.setPuppet(character, true)
+                        layer = 'bundles'
+                        var selected = document.getElementById('editor-layers-panel').getElementsByClassName("selected")
+                        while (selected.length)
+                            selected[0].classList.remove("selected")
+                        document.getElementById(layer).className += " selected"
+                    }
+                } else if (layer.indexOf('-emote') > -1) {
                     if (!puppet.emotes[layer.replace(/-emote/, '')])
                         puppet.addEmote(layer.replace(/-emote/, ''))
                     if (document.getElementById('eyemouth').checked) {
@@ -613,6 +904,8 @@ function mouseUp(e) {
                         puppet.emotes[layer.replace(/-emote/, '')].mouth.addChild(stage.getAsset(newAsset, layer))
                         character.emotes[layer.replace(/-emote/, '')].mouth.push(newAsset)
                     }
+                } else if (layer === 'bundles') {
+                    status.log("Error: You cannot add non-asset bundles to the asset bundles layer.")
                 } else {
                     puppet[layer].addChild(stage.getAsset(newAsset, layer))
                     character[layer === 'headBase' ? 'head' : layer].push(newAsset)
@@ -646,18 +939,22 @@ function mouseDown(e) {
         e.preventDefault()
         window.addEventListener('mousemove', moveAsset, true);
     } else {
-        document.getElementById('assets').style.display = 'none'
-        document.getElementById('asset editor').style.display = ''
-        document.getElementById('asset selected').getElementsByClassName('desc')[0].innerHTML = project.assets[e.target.tab][e.target.asset].name
-        document.getElementById('asset selected').getElementsByTagName('img')[0].src = path.join(project.assetsPath, project.assets[e.target.tab][e.target.asset].location)
-        document.getElementById('asset-tab').value = e.target.tab
-        document.getElementById('asset-name').value = project.assets[e.target.tab][e.target.asset].name
-        document.getElementById('asset-tab').tab = e.target.tab
-        document.getElementById('asset-tab').asset = e.target.asset
-        document.getElementById('asset-name').tab = e.target.tab
-        document.getElementById('asset-name').asset = e.target.asset
-        document.getElementById('delete-asset').tab = e.target.tab
-        document.getElementById('delete-asset').asset = e.target.asset
+        if (project.assets[e.target.tab][e.target.asset].bundle)
+            exports.setAssetBundle(e.target.tab, e.target.asset)
+        else {
+            document.getElementById('assets').style.display = 'none'
+            document.getElementById('asset editor').style.display = ''
+            document.getElementById('asset selected').getElementsByClassName('desc')[0].innerHTML = project.assets[e.target.tab][e.target.asset].name
+            document.getElementById('asset selected').getElementsByTagName('img')[0].src = path.join(project.assetsPath, project.assets[e.target.tab][e.target.asset].location)
+            document.getElementById('asset-tab').value = e.target.tab
+            document.getElementById('asset-name').value = project.assets[e.target.tab][e.target.asset].name
+            document.getElementById('asset-tab').tab = e.target.tab
+            document.getElementById('asset-tab').asset = e.target.asset
+            document.getElementById('asset-name').tab = e.target.tab
+            document.getElementById('asset-name').asset = e.target.asset
+            document.getElementById('delete-asset').tab = e.target.tab
+            document.getElementById('delete-asset').asset = e.target.asset
+        }
     }
 }
 
@@ -668,6 +965,10 @@ function moveAsset(e) {
 }
 
 function savePuppet() {
+    if (bundle) {
+        exports.saveAssetBundle()
+        return
+    }
     status.log('Saving puppet...')
     selected = null
     if (selectedGui) stage.stage.removeChild(selectedGui)
@@ -801,7 +1102,7 @@ function setLayer(e) {
     document.getElementById('editor-layers-panel').style.display = 'none'
     layer = e.target.id
     if (layer.indexOf('-emote') > -1) {
-    var emote = layer.replace(/-emote/, '')
+        var emote = layer.replace(/-emote/, '')
         if (!(character.emotes[emote] && character.emotes[emote].enabled && emote !== 'default') && !character.emotes[emote]) {
             character.emotes[emote] = {
                 "enabled": false,
@@ -1066,10 +1367,31 @@ function zoomOut() {
     stage.resize()
 }
 
+function updateAssetBundle(puppet) {
+    puppet = puppet || selected
+    if (puppet && puppet.bundle) {
+        for (var i = 0; i < puppet.assets.length; i++) {
+            var position = puppet.assets[i].parent.toLocal(puppet.children[i].parent.toGlobal(puppet.children[i].position))
+            puppet.assets[i].position.x = position.x - Math.sin(puppet.rotation) * puppet.assets[i].height / 4 - Math.cos(puppet.rotation) * puppet.assets[i].width / 4 + puppet.assets[i].width / 4
+            puppet.assets[i].position.y = position.y + Math.cos(puppet.rotation) * puppet.assets[i].height / 4 - Math.sin(puppet.rotation) * puppet.assets[i].width / 4 - puppet.assets[i].height / 4
+            puppet.assets[i].rotation = puppet.children[i].rotation + puppet.rotation
+            puppet.assets[i].scale.x = puppet.children[i].scale.x * puppet.scale.x
+            puppet.assets[i].scale.y = puppet.children[i].scale.y * puppet.scale.y
+        }
+    }
+}
+
 function cut() {
     if (selected) {
         electron.clipboard.writeText(JSON.stringify(selected.asset))
-        puppet[layer].removeChild(selected)
+        if (selected.bundle) {
+            puppet.container.removeChild(selected)
+            for (var i = 0; i < selected.children.length; i++) {
+                selected.children[i].remove()
+            }
+        } else {
+            puppet[layer].removeChild(selected)
+        }
         character[layer === 'headBase' ? 'head' : layer].splice(character[layer === 'headBase' ? 'head' : layer].indexOf(selected.asset), 1)
         selected = null
         stage.stage.removeChild(selectedGui)
@@ -1088,7 +1410,22 @@ function paste() {
         return
     }
     var asset = stage.getAsset(newAsset, layer)
-    if (layer.indexOf('-emote') > -1) {
+    // TODO fix code duplication for adding assets :(
+    if (project.assets[newAsset.tab][newAsset.hash].bundle) {
+        if (bundle) {
+            status.log("Error: You cannot nest asset bundles.")
+        } else {
+            character.bundles.push(newAsset)
+            exports.setPuppet(character, true)
+            layer = 'bundles'
+            var selected = document.getElementById('editor-layers-panel').getElementsByClassName("selected")
+            while (selected.length)
+                selected[0].classList.remove("selected")
+            document.getElementById(layer).className += " selected"
+        }
+    } else if (layer.indexOf('-emote') > -1) {
+        if (!puppet.emotes[layer.replace(/-emote/, '')])
+            puppet.addEmote(layer.replace(/-emote/, ''))
         if (document.getElementById('eyemouth').checked) {
             puppet.emotes[layer.replace(/-emote/, '')].eyes.addChild(asset)
             character.emotes[layer.replace(/-emote/, '')].eyes.push(newAsset)
@@ -1096,10 +1433,13 @@ function paste() {
             puppet.emotes[layer.replace(/-emote/, '')].mouth.addChild(asset)
             character.emotes[layer.replace(/-emote/, '')].mouth.push(newAsset)
         }
+    } else if (layer === 'bundles') {
+        status.log("Error: You cannot add non-asset bundles to the asset bundles layer.")
     } else {
         puppet[layer].addChild(asset)
         character[layer === 'headBase' ? 'head' : layer].push(newAsset)
     }
+
     setSelected(asset)
 }
 
@@ -1114,7 +1454,16 @@ function deleteKey() {
                 character.emotes[layer.replace(/-emote/, '')].mouth.splice(character.emotes[layer.replace(/-emote/, '')].mouth.indexOf(selected.asset), 1)
             }
         } else {
-            puppet[layer].removeChild(selected)
+            if (selected.bundle) {
+                puppet.container.removeChild(selected)
+                for (var i = 0; i < selected.assets.length; i++) {
+                    console.log(selected.children[i])
+                    selected.assets[i].parent.removeChild(selected.assets[i])
+                }
+                console.log(puppet.container)
+            } else {
+                puppet[layer].removeChild(selected)
+            }
             character[layer === 'headBase' ? 'head' : layer].splice(character[layer === 'headBase' ? 'head' : layer].indexOf(selected.asset), 1)
         }
         selected = null
diff --git a/src/renderer-process/network.js b/src/renderer-process/network.js
old mode 100644
new mode 100755
index 0268c1f..5ee3ac2
--- a/src/renderer-process/network.js
+++ b/src/renderer-process/network.js
@@ -165,6 +165,21 @@ exports.host = function() {
 				stream.pipe(fs.createWriteStream(path.join(project.assetsPath, asset.tab, asset.hash + '.png')))
 			}
 		})
+		socket.on('add asset bundle', (asset) => {
+			if (!(project.assets[asset.tab] && project.assets[asset.tab][asset.hash])) {
+				status.increment('Retrieving %x Asset%s')
+				var stream = ss.createStream()
+				fs.ensureDirSync(path.join(project.assetsPath, asset.tab))
+				ss(socket).emit('request asset', stream, asset)
+				stream.on('end', () => {
+					controller.addAssetBundleLocal(asset)
+					socket.broadcast.emit('add asset bundle', asset)
+					if (status.decrement('Retrieving %x Asset%s'))
+						status.log('Synced Assets!')
+				})
+				stream.pipe(fs.createWriteStream(path.join(project.assetsPath, asset.tab, asset.hash + '.json')))
+			}
+		})
 		ss(socket).on('request asset', requestAsset)
 	})
 
@@ -322,6 +337,20 @@ exports.connect = function() {
 			stream.pipe(fs.createWriteStream(path.join(project.assetsPath, asset.tab, asset.hash + '.png')))
 		}
 	})
+	socket.on('add asset bundle', (asset) => {
+		if (!(project.assets[asset.tab] && project.assets[asset.tab][asset.hash])) {
+			status.increment('Retrieving %x Asset%s')
+			var stream = ss.createStream()
+			fs.ensureDirSync(path.join(project.assetsPath, asset.tab))
+			ss(socket).emit('request asset', stream, asset)
+			stream.on('end', () => {
+				controller.addAssetBundleLocal(asset)
+				if (status.decrement('Retrieving %x Asset%s'))
+					status.log('Synced Assets!')
+			})
+			stream.pipe(fs.createWriteStream(path.join(project.assetsPath, asset.tab, asset.hash + '.json')))
+		}
+	})
 	ss(socket).on('request asset', requestAsset)
 }
 
diff --git a/src/renderer-process/popout.js b/src/renderer-process/popout.js
old mode 100644
new mode 100755
index 5b53ac9..27e39e4
--- a/src/renderer-process/popout.js
+++ b/src/renderer-process/popout.js
@@ -93,5 +93,8 @@ electron.ipcRenderer.on('remove puppet', (event, id) => {
 electron.ipcRenderer.on('add asset', (event, asset) => {
     stage.addAsset(asset)
 })
+electron.ipcRenderer.on('add asset bundle', (event, asset) => {
+    stage.addAssetBundle(asset)
+})
 
 remote.getCurrentWindow().getParentWindow().webContents.send('loaded')
diff --git a/src/renderer-process/project.js b/src/renderer-process/project.js
old mode 100644
new mode 100755
index f255a13..165df4d
--- a/src/renderer-process/project.js
+++ b/src/renderer-process/project.js
@@ -8,7 +8,7 @@ const editor = require('./editor')
 
 const path = require('path')
 
-module.exports = exports = remote.getGlobal('project').project = {
+module.exports = exports = {
     // project: {},
     // characters: {},
     // assets: {},
@@ -37,6 +37,13 @@ module.exports = exports = remote.getGlobal('project').project = {
 				this.characters[proj.characters[i].id] = fs.readJsonSync(path.join(this.charactersPath, proj.characters[i].location))
 				this.characters[proj.characters[i].id].name = proj.characters[i].name
 				this.characters[proj.characters[i].id].id = proj.characters[i].id
+				// Add any missing keys to loaded puppet
+				var fakeCharacter = JSON.parse(this.getEmptyCharacter())
+				var fakeKeys = Object.keys(fakeCharacter)
+				for (var j = 0; j < fakeKeys.length; j++) {
+					if (!(fakeKeys[j] in this.characters[proj.characters[i].id]))
+						this.characters[proj.characters[i].id][fakeKeys[j]] = fakeCharacter[fakeKeys[j]]
+				}
 				if (proj.characters[i].id > this.numCharacters)
 					this.numCharacters = proj.characters[i].id
 			}
@@ -56,6 +63,7 @@ module.exports = exports = remote.getGlobal('project').project = {
 
 			settings.settings.openProject = filepath
 			settings.save()
+			remote.getGlobal('project').project = this
             controller.init()
 		})
 	},
@@ -156,6 +164,13 @@ module.exports = exports = remote.getGlobal('project').project = {
         delete this.assets[tab]
         this.project.assets.splice(this.project.assets.indexOf(this.project.assets.find((x) => x.name === tab)), 1)
     },
+    addAssetBundle: function(asset) {
+		if (!this.assets[asset.tab]) {
+			this.assets[asset.tab] = {}
+			this.project.assets.push({"name": asset.tab, "location": asset.tab + '.json'})
+		}
+		this.assets[asset.tab][asset.hash] = {"name": asset.name, "location": path.join(asset.tab, asset.hash + '.png'), "bundle": asset.bundle}
+    },
     saveCharacter: function(character) {
         var char = null
         for (var i = 0; i < this.project.characters.length; i++) {
@@ -170,6 +185,9 @@ module.exports = exports = remote.getGlobal('project').project = {
         	char.name = character.name
         this.characters[character.id] = character
     },
+    saveAssetBundle: function(asset) {
+        this.assets[asset.tab][asset.hash] = {"name": asset.name, "location": asset.location, "bundle": asset.bundle, "width": asset.width, "height": asset.height}
+    },
     duplicateCharacter: function(character) {
         this.numCharacters++
         var char = JSON.parse(JSON.stringify(character))
@@ -190,6 +208,7 @@ module.exports = exports = remote.getGlobal('project').project = {
         this.numCharacters++
         return JSON.stringify({
             "deadbonesStyle": false,
+            "bundles": [],
             "body": [],
             "head": [],
             "hat": [],
@@ -213,5 +232,25 @@ module.exports = exports = remote.getGlobal('project').project = {
         puppet.emote = this.actor.emote
         puppet.facingLeft = this.actor.facingLeft
         return puppet
+    },
+    createAssetBundle: function(tab) {
+    	return {
+    		"tab": tab, 
+    		"hash": 1000000000 + Math.floor(Math.random() * 900000000), 
+    		"name": "New Asset Bundle",
+    		"bundle": {
+    			"body": [],
+	            "head": [],
+	            "hat": [],
+	            "emotes": {
+	                "default": {
+	                	"enabled": true,
+	                    "mouth": [],
+	                    "eyes": []
+	                }
+	            },
+	            "props": []
+    		}
+    	}
     }
 }
diff --git a/src/renderer-process/stage.js b/src/renderer-process/stage.js
old mode 100644
new mode 100755
index e115717..3e30c67
--- a/src/renderer-process/stage.js
+++ b/src/renderer-process/stage.js
@@ -80,6 +80,26 @@ Stage.prototype.addAsset = function(asset) {
     TextureCache[path.join(this.assetsPath, this.assets[asset.tab][asset.hash].location)] = PIXI.Texture.fromImage(path.join(this.assetsPath, this.assets[asset.tab][asset.hash].location))
 }
 
+Stage.prototype.addAssetBundle = function(asset) {
+    if (!this.assets[asset.tab])
+        this.assets[asset.tab] = {}
+    this.assets[asset.tab][asset.hash] = {"name": asset.name, "location": path.join(asset.tab, asset.hash + '.png'), "bundle": asset.bundle}
+    var topLevel = ["body", "head", "hat", "props"]
+    for (var j = 0; j < topLevel.length; j++)
+        for (var k = 0; k < asset.bundle[topLevel[j]].length; k++)
+            TextureCache[path.join(this.assetsPath, this.assets[asset.bundle[topLevel[j]][k].tab][asset.bundle[topLevel[j]][k].hash].location)] = 
+                PIXI.Texture.fromImage(path.join(this.assetsPath, this.assets[asset.bundle[topLevel[j]][k].tab][asset.bundle[topLevel[j]][k].hash].location))
+    var emotes = Object.keys(asset.bundle.emotes)
+    for (var j = 0; j < emotes.length; j++) {
+        for (var k = 0; k < asset.bundle.emotes[emotes[j]].eyes.length; k++)
+            TextureCache[path.join(this.assetsPath, this.assets[asset.bundle.emotes[emotes[j]].eyes[k].tab][asset.bundle.emotes[emotes[j]].eyes[k].hash].location)] = 
+                PIXI.Texture.fromImage(path.join(this.assetsPath, this.assets[asset.bundle.emotes[emotes[j]].eyes[k].tab][asset.bundle.emotes[emotes[j]].eyes[k].hash].location))
+        for (var k = 0; k < asset.bundle.emotes[emotes[j]].mouth.length; k++)
+            TextureCache[path.join(this.assetsPath, this.assets[asset.bundle.emotes[emotes[j]].mouth[k].tab][asset.bundle.emotes[emotes[j]].mouth[k].hash].location)] = 
+                PIXI.Texture.fromImage(path.join(this.assetsPath, this.assets[asset.bundle.emotes[emotes[j]].mouth[k].tab][asset.bundle.emotes[emotes[j]].mouth[k].hash].location))
+    }
+}
+
 Stage.prototype.reattach = function(element) {
     this.screen = document.getElementById(element)
     this.screen.appendChild(this.renderer.view)
@@ -287,11 +307,54 @@ Stage.prototype.getAsset = function(asset, layer) {
     sprite.rotation = asset.rotation
     sprite.scale.x = asset.scaleX
     sprite.scale.y = asset.scaleY
-    sprite.layer = layer
-    sprite.asset = asset
+    if (layer) {
+        sprite.layer = layer
+        sprite.asset = asset
+    }
     return sprite
 }
 
+Stage.prototype.applyAssetBundle = function(puppet, asset) {
+    var bundle = this.assets[asset.tab][asset.hash].bundle
+    for (var i = 0; i < bundle.body.length; i++) {
+        puppet.body.addChild(this.getAsset(this.applyTransformations(bundle.body[i], asset)))
+    }
+    for (var i = 0; i < bundle.head.length; i++) {
+        puppet.headBase.addChild(this.getAsset(this.applyTransformations(bundle.head[i], asset)))
+    }
+    var emotes = Object.keys(bundle.emotes)
+    for (var i = 0; i < emotes.length; i++) {
+        puppet.emotes[emotes[i]] = {
+            "mouth": new Container(),
+            "eyes": new Container()
+        }
+        puppet.mouthsContainer.addChild(puppet.emotes[emotes[i]].mouth)
+        puppet.eyesContainer.addChild(puppet.emotes[emotes[i]].eyes)
+        for (var j = 0; j < bundle.emotes[emotes[i]].mouth.length; j++) {
+            puppet.emotes[emotes[i]].mouth.addChild(this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].mouth[j], asset)))
+        }
+        for (var j = 0; j < bundle.emotes[emotes[i]].eyes.length; j++) {
+            puppet.emotes[emotes[i]].eyes.addChild(this.getAsset(this.applyTransformations(bundle.emotes[emotes[i]].eyes[j], asset)))
+        }
+    }
+    for (var i = 0; i < bundle.hat.length; i++) {
+        puppet.hat.addChild(this.getAsset(this.applyTransformations(bundle.hat[i], asset)))
+    }
+    for (var i = 0; i < bundle.props.length; i++) {
+        puppet.props.addChild(this.getAsset(this.applyTransformation(bundle.props[i], asset)))
+    }
+}
+
+Stage.prototype.applyTransformations = function(asset, bundle) {
+    var newAsset = JSON.parse(JSON.stringify(asset))
+    newAsset.x = Math.cos(bundle.rotation) * asset.x * bundle.scaleX - Math.sin(bundle.rotation) * asset.y * bundle.scaleY
+    newAsset.y = Math.cos(bundle.rotation) * asset.y * bundle.scaleY - Math.sin(bundle.rotation) * asset.x * bundle.scaleX
+    newAsset.rotation += bundle.rotation
+    newAsset.scaleX *= bundle.scaleX
+    newAsset.scaleY *= bundle.scaleY
+    return newAsset
+}
+
 // Puppet Prototype
 var Puppet = function(stage, puppet, id) {
     // Init Variables
@@ -312,26 +375,43 @@ var Puppet = function(stage, puppet, id) {
 
     // Construct Puppet
     this.body = new Container()
-    for (var i = 0; i < puppet.body.length; i++) {
-        this.body.addChild(stage.getAsset(puppet.body[i], 'body'))
-    }
     this.container.addChild(this.body)
-
     this.head = new Container()
     this.headBase = new Container()
-    for (var i = 0; i < puppet.head.length; i++) {
-        this.headBase.addChild(stage.getAsset(puppet.head[i], 'headBase'))
-    }
     this.head.addChild(this.headBase)
     this.emotes = {}
     this.mouthsContainer = new Container()
     this.eyesContainer = new Container()
+    this.head.addChild(this.mouthsContainer)
+    this.head.addChild(this.eyesContainer)
+    this.hat = new Container()
+    this.head.addChild(this.hat)
+    this.container.addChild(this.head)
+    this.props = new Container()
+    this.container.addChild(this.props)
+
+    // Add Asset Bundles
+    if (puppet.bundles) { // asset bundles can't have bundles inside of them
+        for (var j = 0; j < puppet.bundles.length; j++) {
+            stage.applyAssetBundle(this, puppet.bundles[j])
+        }
+    }
+
+    // Add Assets
+    for (var i = 0; i < puppet.body.length; i++) {
+        this.body.addChild(stage.getAsset(puppet.body[i], 'body'))
+    }
+    for (var i = 0; i < puppet.head.length; i++) {
+        this.headBase.addChild(stage.getAsset(puppet.head[i], 'headBase'))
+    }
     var emotes = Object.keys(puppet.emotes)
     for (var i = 0; i < emotes.length; i++) {
         if (!puppet.emotes[emotes[i]].enabled) continue
-        this.emotes[emotes[i]] = {
-            "mouth": new Container(),
-            "eyes": new Container()
+        if (!this.emotes[emotes[i]]) {
+            this.emotes[emotes[i]] = {
+                "mouth": new Container(),
+                "eyes": new Container()
+            }
         }
         this.mouthsContainer.addChild(this.emotes[emotes[i]].mouth)
         this.eyesContainer.addChild(this.emotes[emotes[i]].eyes)
@@ -342,23 +422,17 @@ var Puppet = function(stage, puppet, id) {
             this.emotes[emotes[i]].eyes.addChild(stage.getAsset(puppet.emotes[emotes[i]].eyes[j], emotes[i] + '-emote'))
         }
     }
-    this.head.addChild(this.mouthsContainer)
-    this.head.addChild(this.eyesContainer)
-    this.hat = new Container()
     for (var i = 0; i < puppet.hat.length; i++) {
         this.hat.addChild(stage.getAsset(puppet.hat[i], 'hat'))
     }
-    this.head.addChild(this.hat)
-    this.head.pivot.y = - this.headBase.height / 2
-    this.head.y = - this.headBase.height / 2
-    this.deadbonesTargetY = this.deadbonesStartY = - this.headBase.height / 2
-    this.container.addChild(this.head)
-
-    this.props = new Container()
     for (var i = 0; i < puppet.props.length; i++) {
         this.props.addChild(stage.getAsset(puppet.props[i], 'props'))
     }
-    this.container.addChild(this.props)
+
+    // Set up bobble stuff
+    this.head.pivot.y = - this.headBase.height / 2
+    this.head.y = - this.headBase.height / 2
+    this.deadbonesTargetY = this.deadbonesStartY = - this.headBase.height / 2
 
     // Finish Setup
     this.changeEmote(puppet.emote)